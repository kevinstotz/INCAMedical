# Generated by Django 2.1.3 on 2018-11-13 14:33

import API.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('address1', models.CharField(default='', max_length=255, verbose_name='Address 1')),
                ('address2', models.CharField(default='', max_length=255, verbose_name='Address 2')),
                ('address3', models.CharField(default='', max_length=255, verbose_name='Address 3')),
                ('unit', models.CharField(default='', max_length=20, verbose_name='Unit')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Address Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='AddressType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=20, verbose_name='Type of Address')),
                ('active', models.BooleanField(default=True, verbose_name='Address Type Active')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=100)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Audit Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='AuditArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of Area')),
                ('present_on_rounds', models.CharField(blank=True, max_length=100)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Audit Area Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('short_name', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('active', models.BooleanField(default=True, verbose_name='Category Active')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, verbose_name='City Name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ClinicType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=255, verbose_name='Type of Clinic')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Clinic Type Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('site_id', models.CharField(blank=True, max_length=10, verbose_name='Site ID Company')),
                ('name', models.CharField(max_length=255, verbose_name='Name of Company')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Company Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sort_name', models.CharField(default='XX', max_length=3, verbose_name='2 letter name')),
                ('name', models.CharField(default='XXX', max_length=50, verbose_name='Country Name')),
                ('phone_code', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('sort_name',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Register')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Email address Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddressStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Email Address')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Email Address Status Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddressType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=20, verbose_name='Type of Email Address')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Email address Type Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=60, verbose_name='Subject of Email')),
                ('fromAddress', models.CharField(max_length=50, verbose_name='From Username')),
                ('htmlFilename', models.FileField(blank=True, null=True, upload_to='API\\EmailTemplates', verbose_name='Filename')),
                ('textFilename', models.FileField(blank=True, null=True, upload_to='API\\EmailTemplates', verbose_name='Filename')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Email Template Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EPAIndicator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('indicator', models.CharField(max_length=255, unique=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='EPA Indicator Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('short_name', models.CharField(max_length=50)),
                ('name', models.TextField(max_length=2000)),
                ('active', models.BooleanField(default=True, verbose_name='Indicators Active')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='indicatorCompany', to='API.Company', verbose_name='Indicator Company')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='IndicatorOption',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('option', models.CharField(max_length=50, unique=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Indicator Option created')),
                ('active', models.BooleanField(default=True, verbose_name='Indicator Option Active')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='indicatorOptionCompany', to='API.Company', verbose_name='Indicator Option Company')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Indicators',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('indicator', models.CharField(default='None', max_length=255)),
                ('active', models.BooleanField(default=True, verbose_name='Indicators Active')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='indicatorCategory', to='API.Category', verbose_name='Indicator Category')),
                ('subcategory', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='indicatorSubcategory', to='API.Category', verbose_name='Indicator Subcategory')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='IndicatorType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, unique=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Indicator Type created')),
                ('active', models.BooleanField(default=True, verbose_name='Indicator Type Active')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='indicatorTypeCompany', to='API.Company', verbose_name='Indicator Type Company')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='MailServer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('vendor', models.CharField(default='No Name', max_length=255, verbose_name='vendor name')),
                ('username', models.CharField(default='No Name', max_length=100, verbose_name='username')),
                ('password', models.CharField(default='No Name', max_length=64, verbose_name='password')),
                ('server', models.CharField(default='No Name', max_length=255, verbose_name='server name')),
                ('port', models.IntegerField(default=465)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=False, verbose_name='Active Mail Server')),
            ],
            options={
                'ordering': ('vendor',),
            },
        ),
        migrations.CreateModel(
            name='NameType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, verbose_name='Type of Name')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Name Type Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fromUser', models.IntegerField(default=0)),
                ('toUser', models.IntegerField(default=0)),
                ('message', models.IntegerField(default=0)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Notification Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NotificationStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Notification')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Notification Status Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, verbose_name='Type of Notification')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Notification Type Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PersonName',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name of Person')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Person Name Active')),
                ('type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='nameType', to='API.NameType', verbose_name='Name Type')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(default='0000000000', max_length=16, verbose_name='Phone Number')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Phone Number Active')),
                ('country', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='phoneNumberCountry', to='API.Country', verbose_name='Phone Number Country')),
            ],
            options={
                'ordering': ('id', 'phone_number', 'country'),
            },
        ),
        migrations.CreateModel(
            name='PhoneNumberType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=20, verbose_name='Type of Phone Number')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Phone Number Type Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SpecialtyType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=100, verbose_name='Specialty Type of Company')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Specialty Type created')),
                ('active', models.BooleanField(default=True, verbose_name='Specialty Type Active')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='specialtyType', to='API.Company', verbose_name='SpecialtyType Company')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='XX', max_length=40, verbose_name='State Name')),
                ('code', models.CharField(default='XX', max_length=2, verbose_name='State Code')),
                ('country', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='stateCountry', to='API.Country', verbose_name='State Country')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Template Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='TemplateCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('parent', models.UUIDField(default='00000000-0000-0000-0000-000000000000', validators=[API.models.validate_uuid])),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Template Category Active')),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='templateCategoryCategory', to='API.Category', verbose_name='Template Category Category')),
                ('template', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='TemplateCategoryTemplate', to='API.Template', verbose_name='Template Category Template')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='TemplateIndicator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('parent', models.UUIDField(default='00000000-0000-0000-0000-000000000000', validators=[API.models.validate_uuid])),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='Template Indicator Active')),
                ('indicator', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='templateIndicatorIndicator', to='API.Indicator', verbose_name='Template Indicator Indicator')),
                ('template', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='templateIndicatorTemplate', to='API.Template', verbose_name='Template Indicator Template')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.CharField(blank=True, default='1970/01/01', max_length=50, verbose_name='date of birth of user')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('about', models.TextField(blank=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='User Profile created')),
                ('address', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='userProfileAddress', to='API.Address', verbose_name='User Profile Address')),
                ('first_name', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='userProfileFirstName', to='API.PersonName', verbose_name='User Profile First Name')),
                ('last_name', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='userProfileLastName', to='API.PersonName', verbose_name='User Profile Last Name')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=42, verbose_name='Status of User')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Time Updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('active', models.BooleanField(default=True, verbose_name='User Status Active')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('zipcode', models.CharField(default='00000', max_length=5)),
            ],
            options={
                'ordering': ('zipcode',),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Login of user')),
                ('username', models.CharField(default='Username', max_length=100, unique=True, verbose_name='username of user')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Time created')),
                ('is_active', models.BooleanField(default=True)),
                ('is_logged_in', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='customUserStatus', to='API.UserStatus', verbose_name='Customer User Status')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='template',
            name='categories',
            field=models.ManyToManyField(through='API.TemplateCategory', to='API.Category'),
        ),
        migrations.AddField(
            model_name='template',
            name='company',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='templateCompany', to='API.Company', verbose_name='Template Company'),
        ),
        migrations.AddField(
            model_name='template',
            name='indicators',
            field=models.ManyToManyField(through='API.TemplateIndicator', to='API.Indicator'),
        ),
        migrations.AddField(
            model_name='state',
            name='zip_codes',
            field=models.ManyToManyField(default=1, related_name='statesZipCodes', to='API.ZipCode', verbose_name='State Zip Code'),
        ),
        migrations.AddField(
            model_name='phonenumber',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='phoneNumberType', to='API.PhoneNumberType', verbose_name='Phone Number Country'),
        ),
        migrations.AddField(
            model_name='notification',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='notificationStatus', to='API.NotificationStatus', verbose_name='Notification Status'),
        ),
        migrations.AddField(
            model_name='notification',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='notificationType', to='API.NotificationType', verbose_name='Notification Type'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='options',
            field=models.ManyToManyField(to='API.IndicatorOption'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='indicatorType', to='API.IndicatorType', verbose_name='Indicator Type'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='API.EmailAddressStatus'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.EmailAddressType'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='user_profile',
            field=models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='customUserProfile', to='API.UserProfile', verbose_name='Custom User Profile'),
        ),
        migrations.AddField(
            model_name='company',
            name='user_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='companyUserProfile', to='API.UserProfile', verbose_name='Company User Profile'),
        ),
        migrations.AddField(
            model_name='clinictype',
            name='company',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='clinicTypeCompany', to='API.Company', verbose_name='Clinic Type Company'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='cityState', to='API.State', verbose_name='State City'),
        ),
        migrations.AddField(
            model_name='city',
            name='zip_codes',
            field=models.ManyToManyField(default=1, related_name='cityStates', to='API.ZipCode', verbose_name='City State'),
        ),
        migrations.AddField(
            model_name='category',
            name='company',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='categoryCompany', to='API.Company', verbose_name='Category Company'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='clinic_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaClinicType', to='API.ClinicType', verbose_name='Audit Area Clinic Type'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='company',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaCompany', to='API.Company', verbose_name='Audit Area Company'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='director',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaDirector', to='API.PersonName', verbose_name='Audit Area Director'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='manager',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaManager', to='API.PersonName', verbose_name='Audit Company Manager'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='phone',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaPhoneNumber', to='API.PhoneNumber', verbose_name='Audit Area Phone Number'),
        ),
        migrations.AddField(
            model_name='auditarea',
            name='specialty_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditAreaSpecialtyType', to='API.SpecialtyType', verbose_name='Audit Area Specialty Type'),
        ),
        migrations.AddField(
            model_name='audit',
            name='area',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditArea', to='API.AuditArea', verbose_name='Audit Area'),
        ),
        migrations.AddField(
            model_name='audit',
            name='template',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='auditTemplate', to='API.Template', verbose_name='Audit Template'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='addressCity', to='API.City', verbose_name='Address City'),
        ),
        migrations.AddField(
            model_name='address',
            name='country',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='addressCountry', to='API.Country', verbose_name='Address Country'),
        ),
        migrations.AddField(
            model_name='address',
            name='state',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='addressState', to='API.State', verbose_name='Address State'),
        ),
        migrations.AddField(
            model_name='address',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='addressType', to='API.AddressType', verbose_name='Address Type'),
        ),
        migrations.AddField(
            model_name='address',
            name='zipcode',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='addressZipcode', to='API.ZipCode', verbose_name='Address Zip Code'),
        ),
        migrations.AlterUniqueTogether(
            name='template',
            unique_together={('company', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='auditarea',
            unique_together={('company', 'name')},
        ),
    ]
